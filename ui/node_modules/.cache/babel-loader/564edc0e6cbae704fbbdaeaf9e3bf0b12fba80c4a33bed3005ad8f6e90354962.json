{"ast":null,"code":"var _jsxFileName = \"/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Tests.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tests = () => {\n  _s();\n  const [tests, setTests] = useState([]); // State to hold fetched tests\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\n\n  // Function to fetch data from the backend when the component mounts\n  const fetchTests = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\n      const data = await response.json();\n      setTests(data); // Set the fetched tests in state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Function to handle selecting a test\n  const handleTestClick = async test => {\n    try {\n      // Make a POST request to fetch the question paper for the selected test\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          testId: test._id\n        }) // Sending the test ID in the request body\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch question paper\");\n      }\n      const questionPaperData = await response.json();\n      // Handle the question paper data as needed, e.g., navigate to a new component\n      console.log(\"Question Paper Data:\", questionPaperData);\n\n      // Set the selected test to display fullscreen\n      setSelectedTest(test);\n    } catch (error) {\n      console.error(\"Error fetching question paper:\", error);\n    }\n  };\n\n  // Function to handle going back to showing all tests\n  const handleBackToTests = () => {\n    setSelectedTest(null); // Reset selected test to null to display all tests\n  };\n  useEffect(() => {\n    fetchTests(); // Fetch data when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests-container\",\n    children: selectedTest ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-fullscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToTests,\n          children: \"\\u2B05\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Test \", tests.indexOf(selectedTest) + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: selectedTest.questionId.map((questionId, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"test-question\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Question \", index + 1, \": \", questionId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tests-wrapper\",\n        children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleTestClick(test),\n          className: \"test-box\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Test \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)\n        }, test._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Tests, \"RWHyFIIDryj6lBZU3wnf0CznQjo=\");\n_c = Tests;\nexport default Tests;\nvar _c;\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Tests","_s","tests","setTests","selectedTest","setSelectedTest","fetchTests","response","fetch","data","json","error","console","handleTestClick","test","method","headers","body","JSON","stringify","testId","_id","ok","Error","questionPaperData","log","handleBackToTests","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","indexOf","questionId","map","index","_c","$RefreshReg$"],"sources":["/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Tests.css\"; // Import the CSS file for styling\r\n\r\nconst Tests = () => {\r\n  const [tests, setTests] = useState([]); // State to hold fetched tests\r\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\r\n\r\n  // Function to fetch data from the backend when the component mounts\r\n  const fetchTests = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\r\n      const data = await response.json();\r\n      setTests(data); // Set the fetched tests in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle selecting a test\r\n  const handleTestClick = async (test) => {\r\n    try {\r\n      // Make a POST request to fetch the question paper for the selected test\r\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ testId: test._id }), // Sending the test ID in the request body\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch question paper\");\r\n      }\r\n\r\n      const questionPaperData = await response.json();\r\n      // Handle the question paper data as needed, e.g., navigate to a new component\r\n      console.log(\"Question Paper Data:\", questionPaperData);\r\n\r\n      // Set the selected test to display fullscreen\r\n      setSelectedTest(test);\r\n    } catch (error) {\r\n      console.error(\"Error fetching question paper:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle going back to showing all tests\r\n  const handleBackToTests = () => {\r\n    setSelectedTest(null); // Reset selected test to null to display all tests\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTests(); // Fetch data when the component mounts\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tests-container\">\r\n      {selectedTest ? (\r\n        <div className=\"test-fullscreen\">\r\n          <div className=\"test-content\">\r\n            <button onClick={handleBackToTests}>â¬…</button>\r\n            <h1>Test {tests.indexOf(selectedTest) + 1}</h1>\r\n            <div>\r\n              {selectedTest.questionId.map((questionId, index) => (\r\n                <div key={index} className=\"test-question\">\r\n                  <p>\r\n                    Question {index + 1}: {questionId}\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1>Tests</h1>\r\n          <div className=\"tests-wrapper\">\r\n            {tests.map((test, index) => (\r\n              <div\r\n                key={test._id}\r\n                onClick={() => handleTestClick(test)}\r\n                className=\"test-box\"\r\n              >\r\n                <h3>Test {index + 1}</h3>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tests;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}