{"ast":null,"code":"var _jsxFileName = \"/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js\",\n  _s = $RefreshSig$();\n// Tests.js\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Tests.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tests = () => {\n  _s();\n  const [tests, setTests] = useState([]); // State to hold fetched tests\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\n\n  // Function to fetch data from the backend when the component mounts\n  const fetchTests = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\n      const data = await response.json();\n      setTests(data); // Set the fetched tests in state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Function to handle selecting a test\n  const handleTestClick = test => {\n    setSelectedTest(test); // Set the selected test to display fullscreen\n  };\n\n  // Function to handle going back to showing all tests\n  const handleBackToTests = () => {\n    setSelectedTest(null); // Reset selected test to null to display all tests\n  };\n  useEffect(() => {\n    fetchTests(); // Fetch data when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests-container\",\n    children: selectedTest ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-fullscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToTests,\n          children: \"\\u2B05\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Test \", tests.indexOf(selectedTest) + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: selectedTest.questionId.map((questionId, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"test-question\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Question \", index + 1, \": \", questionId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tests-wrapper\",\n        children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleTestClick(test),\n          className: \"test-box\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Test \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)\n        }, test._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Tests, \"RWHyFIIDryj6lBZU3wnf0CznQjo=\");\n_c = Tests;\nexport default Tests;\nvar _c;\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Tests","_s","tests","setTests","selectedTest","setSelectedTest","fetchTests","response","fetch","data","json","error","console","handleTestClick","test","handleBackToTests","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","indexOf","questionId","map","index","_id","_c","$RefreshReg$"],"sources":["/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js"],"sourcesContent":["// Tests.js\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Tests.css\"; // Import the CSS file for styling\r\n\r\nconst Tests = () => {\r\n  const [tests, setTests] = useState([]); // State to hold fetched tests\r\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\r\n\r\n  // Function to fetch data from the backend when the component mounts\r\n  const fetchTests = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\r\n      const data = await response.json();\r\n      setTests(data); // Set the fetched tests in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle selecting a test\r\n  const handleTestClick = (test) => {\r\n    setSelectedTest(test); // Set the selected test to display fullscreen\r\n  };\r\n\r\n  // Function to handle going back to showing all tests\r\n  const handleBackToTests = () => {\r\n    setSelectedTest(null); // Reset selected test to null to display all tests\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTests(); // Fetch data when the component mounts\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tests-container\">\r\n      {selectedTest ? (\r\n        <div className=\"test-fullscreen\">\r\n          <div className=\"test-content\">\r\n            <button onClick={handleBackToTests}>â¬…</button>\r\n            <h1>Test {tests.indexOf(selectedTest) + 1}</h1>\r\n            <div>\r\n              {selectedTest.questionId.map((questionId, index) => (\r\n                <div key={index} className=\"test-question\">\r\n                  <p>\r\n                    Question {index + 1}: {questionId}\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1>Tests</h1>\r\n          <div className=\"tests-wrapper\">\r\n            {tests.map((test, index) => (\r\n              <div\r\n                key={test._id}\r\n                onClick={() => handleTestClick(test)}\r\n                className=\"test-box\"\r\n              >\r\n                <h3>Test {index + 1}</h3>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tests;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}