{"ast":null,"code":"var _jsxFileName = \"/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Tests.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tests = () => {\n  _s();\n  const [tests, setTests] = useState([]); // State to hold fetched tests\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\n  const [questionPaper, setQuestionPaper] = useState([]); // State to hold fetched question paper\n\n  // Function to fetch data from the backend when the component mounts\n  const fetchTests = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\n      const data = await response.json();\n      setTests(data); // Set the fetched tests in state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Function to fetch question paper for the selected test\n  const fetchQuestionPaper = async testID => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          testID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch question paper\");\n      }\n      const questionPaperData = await response.json();\n      // Ensure that questionPaperData is defined before mapping over it\n      if (Array.isArray(questionPaperData)) {\n        // Add a 'selectedOption' property to each question to track the selected radio button\n        const updatedQuestionPaper = questionPaperData.map(question => ({\n          ...question,\n          selectedOption: null\n        }));\n        setQuestionPaper(updatedQuestionPaper);\n      } else {\n        console.error(\"Invalid question paper data format\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching question paper:\", error);\n    }\n  };\n\n  // Function to handle selecting a test\n  const handleTestClick = async test => {\n    await fetchQuestionPaper(test._id);\n    setSelectedTest(test); // Set the selected test to display fullscreen\n  };\n\n  // Function to handle going back to showing all tests\n  const handleBackToTests = () => {\n    setSelectedTest(null); // Reset selected test to null to display all tests\n  };\n\n  // Function to handle radio button change\n  const handleRadioChange = (questionIndex, optionIndex) => {\n    // Update the selectedOption property in the questionPaper state\n    setQuestionPaper(prevQuestionPaper => {\n      const newQuestionPaper = [...prevQuestionPaper];\n      newQuestionPaper[questionIndex].selectedOption = optionIndex;\n      return newQuestionPaper;\n    });\n  };\n  useEffect(() => {\n    fetchTests(); // Fetch data when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests-container\",\n    children: selectedTest ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-fullscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToTests,\n          children: \"\\u2B05\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Test \", tests.indexOf(selectedTest) + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: questionPaper.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"test-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.problemStatement\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this), question.options && Array.isArray(question.options) ? question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"test-option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `question-${questionIndex}`,\n                id: `option-${optionIndex}`,\n                checked: question.selectedOption === optionIndex,\n                onChange: () => handleRadioChange(questionIndex, optionIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: `option-${optionIndex}`,\n                children: option\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 25\n              }, this)]\n            }, optionIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 23\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error: Invalid options format\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 21\n            }, this)]\n          }, questionIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tests-wrapper\",\n        children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleTestClick(test),\n          className: \"test-box\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Test \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this)\n        }, test._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Tests, \"HD7l+OweQf3KMpDNZCdxKShI0Wk=\");\n_c = Tests;\nexport default Tests;\nvar _c;\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Tests","_s","tests","setTests","selectedTest","setSelectedTest","questionPaper","setQuestionPaper","fetchTests","response","fetch","data","json","error","console","fetchQuestionPaper","testID","method","headers","body","JSON","stringify","ok","Error","questionPaperData","Array","isArray","updatedQuestionPaper","map","question","selectedOption","handleTestClick","test","_id","handleBackToTests","handleRadioChange","questionIndex","optionIndex","prevQuestionPaper","newQuestionPaper","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","indexOf","problemStatement","options","option","type","name","id","checked","onChange","htmlFor","index","_c","$RefreshReg$"],"sources":["/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Tests.css\"; // Import the CSS file for styling\r\n\r\nconst Tests = () => {\r\n  const [tests, setTests] = useState([]); // State to hold fetched tests\r\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\r\n  const [questionPaper, setQuestionPaper] = useState([]); // State to hold fetched question paper\r\n\r\n  // Function to fetch data from the backend when the component mounts\r\n  const fetchTests = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\r\n      const data = await response.json();\r\n      setTests(data); // Set the fetched tests in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to fetch question paper for the selected test\r\n  const fetchQuestionPaper = async (testID) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ testID }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch question paper\");\r\n      }\r\n\r\n      const questionPaperData = await response.json();\r\n      // Ensure that questionPaperData is defined before mapping over it\r\n      if (Array.isArray(questionPaperData)) {\r\n        // Add a 'selectedOption' property to each question to track the selected radio button\r\n        const updatedQuestionPaper = questionPaperData.map((question) => ({\r\n          ...question,\r\n          selectedOption: null,\r\n        }));\r\n        setQuestionPaper(updatedQuestionPaper);\r\n      } else {\r\n        console.error(\"Invalid question paper data format\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching question paper:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle selecting a test\r\n  const handleTestClick = async (test) => {\r\n    await fetchQuestionPaper(test._id);\r\n    setSelectedTest(test); // Set the selected test to display fullscreen\r\n  };\r\n\r\n  // Function to handle going back to showing all tests\r\n  const handleBackToTests = () => {\r\n    setSelectedTest(null); // Reset selected test to null to display all tests\r\n  };\r\n\r\n  // Function to handle radio button change\r\n  const handleRadioChange = (questionIndex, optionIndex) => {\r\n    // Update the selectedOption property in the questionPaper state\r\n    setQuestionPaper((prevQuestionPaper) => {\r\n      const newQuestionPaper = [...prevQuestionPaper];\r\n      newQuestionPaper[questionIndex].selectedOption = optionIndex;\r\n      return newQuestionPaper;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTests(); // Fetch data when the component mounts\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tests-container\">\r\n      {selectedTest ? (\r\n        <div className=\"test-fullscreen\">\r\n          <div className=\"test-content\">\r\n            <button onClick={handleBackToTests}>⬅</button>\r\n            <h1>Test {tests.indexOf(selectedTest) + 1}</h1>\r\n            <div>\r\n              {questionPaper.map((question, questionIndex) => (\r\n                <div key={questionIndex} className=\"test-question\">\r\n                  <p>{question.problemStatement}</p>\r\n                  {question.options && Array.isArray(question.options) ? (\r\n                    question.options.map((option, optionIndex) => (\r\n                      <div key={optionIndex} className=\"test-option\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          name={`question-${questionIndex}`}\r\n                          id={`option-${optionIndex}`}\r\n                          checked={question.selectedOption === optionIndex}\r\n                          onChange={() =>\r\n                            handleRadioChange(questionIndex, optionIndex)\r\n                          }\r\n                        />\r\n                        <label htmlFor={`option-${optionIndex}`}>\r\n                          {option}\r\n                        </label>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <p>Error: Invalid options format</p>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1>Tests</h1>\r\n          <div className=\"tests-wrapper\">\r\n            {tests.map((test, index) => (\r\n              <div\r\n                key={test._id}\r\n                onClick={() => handleTestClick(test)}\r\n                className=\"test-box\"\r\n              >\r\n                <h3>Test {index + 1}</h3>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tests;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}