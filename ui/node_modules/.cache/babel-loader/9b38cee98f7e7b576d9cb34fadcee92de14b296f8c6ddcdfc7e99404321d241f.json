{"ast":null,"code":"var _jsxFileName = \"/Users/ashwanisoni/Documents/Courses/eval/Eval/ui/src/Tests.js\",\n  _s = $RefreshSig$();\n// Tests.js\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Tests.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tests = ({\n  userId\n}) => {\n  _s();\n  const [tests, setTests] = useState([]); // State to hold fetched tests\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\n  const [questionPaper, setQuestionPaper] = useState([]); // State to hold fetched question paper\n  const [questionIDs, setQuestionIDs] = useState([]); // State to hold selected question IDs\n  const [selectedOptions, setSelectedOptions] = useState([]); // State to hold selected options\n  const [rollNo, setRollNo] = useState(\"\"); // State to hold roll number\n  const [testID, setTestID] = useState(\"\"); // State to hold current selected test ID\n\n  // Function to fetch data from the backend when the component mounts\n  const fetchTests = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\n      const data = await response.json();\n      setTests(data); // Set the fetched tests in state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Function to fetch question paper for the selected test\n  const fetchQuestionPaper = async testID => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          testID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch question paper\");\n      }\n      const questionPaperData = await response.json();\n      // Ensure that questionPaperData is defined before mapping over it\n      if (Array.isArray(questionPaperData)) {\n        // Add a 'selectedOption' property to each question to track the selected radio button\n        const updatedQuestionPaper = questionPaperData.map(question => ({\n          ...question,\n          selectedOption: null\n        }));\n        setQuestionPaper(updatedQuestionPaper);\n      } else {\n        console.error(\"Invalid question paper data format\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching question paper:\", error);\n    }\n  };\n\n  // Function to handle selecting a test\n  const handleTestClick = async test => {\n    await fetchQuestionPaper(test._id);\n    setSelectedTest(test); // Set the selected test to display fullscreen\n    setTestID(test._id); // Set the current selected test ID\n    setQuestionIDs(test.questionId); // Set the question IDs for the selected test\n    setRollNo(userId); // Set the roll number using the received userId\n  };\n\n  // Function to handle going back to showing all tests\n  const handleBackToTests = () => {\n    setSelectedTest(null); // Reset selected test to null to display all tests\n    setQuestionIDs([]); // Reset selected question IDs\n    setSelectedOptions([]); // Reset selected options\n    setRollNo(\"\"); // Reset roll number\n    setTestID(\"\"); // Reset current selected test ID\n  };\n\n  // Function to handle radio button change\n  const handleRadioChange = (questionIndex, optionIndex) => {\n    // Update the selectedOption property in the questionPaper state\n    setQuestionPaper(prevQuestionPaper => {\n      const newQuestionPaper = [...prevQuestionPaper];\n      newQuestionPaper[questionIndex].selectedOption = optionIndex;\n      return newQuestionPaper;\n    });\n\n    // Update the selectedOptions state\n    setSelectedOptions(prevSelectedOptions => {\n      const newSelectedOptions = [...prevSelectedOptions];\n      newSelectedOptions[questionIndex] = `option${optionIndex + 1}`;\n      return newSelectedOptions;\n    });\n  };\n\n  // Function to handle score calculation\n  const handleCalculateScore = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/calculateScore\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          questionIDs,\n          options: selectedOptions,\n          rollNo,\n          testID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to calculate score\");\n      }\n      const scoreData = await response.json();\n      console.log(\"Score Data:\", scoreData);\n      // Add logic to handle the received score data (if needed)\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTests(); // Fetch data when the component mounts\n  }, []);\n\n  // useEffect to update rollNo when userId prop changes\n  useEffect(() => {\n    setRollNo(userId);\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests-container\",\n    children: selectedTest ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-fullscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToTests,\n          children: \"\\u2B05\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Test \", tests.indexOf(selectedTest) + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: questionPaper.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"test-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.problemStatement\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"test-options\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"test-option\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: `question-${questionIndex}`,\n                  id: `option-1-${questionIndex}`,\n                  checked: question.selectedOption === 0,\n                  onChange: () => handleRadioChange(questionIndex, 0)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `option-1-${questionIndex}`,\n                  children: question.option1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"test-option\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: `question-${questionIndex}`,\n                  id: `option-2-${questionIndex}`,\n                  checked: question.selectedOption === 1,\n                  onChange: () => handleRadioChange(questionIndex, 1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `option-2-${questionIndex}`,\n                  children: question.option2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"test-option\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: `question-${questionIndex}`,\n                  id: `option-3-${questionIndex}`,\n                  checked: question.selectedOption === 2,\n                  onChange: () => handleRadioChange(questionIndex, 2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `option-3-${questionIndex}`,\n                  children: question.option3\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"test-option\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: `question-${questionIndex}`,\n                  id: `option-4-${questionIndex}`,\n                  checked: question.selectedOption === 3,\n                  onChange: () => handleRadioChange(questionIndex, 3)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `option-4-${questionIndex}`,\n                  children: question.option4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 19\n            }, this)]\n          }, questionIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCalculateScore,\n          children: \"Calculate Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tests-wrapper\",\n        children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleTestClick(test),\n          className: \"test-box\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Test \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this)\n        }, test._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(Tests, \"ueZqd0pQhspHDWgb+IWg2JR0Kp0=\");\n_c = Tests;\nexport default Tests;\nvar _c;\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Tests","userId","_s","tests","setTests","selectedTest","setSelectedTest","questionPaper","setQuestionPaper","questionIDs","setQuestionIDs","selectedOptions","setSelectedOptions","rollNo","setRollNo","testID","setTestID","fetchTests","response","fetch","data","json","error","console","fetchQuestionPaper","method","headers","body","JSON","stringify","ok","Error","questionPaperData","Array","isArray","updatedQuestionPaper","map","question","selectedOption","handleTestClick","test","_id","questionId","handleBackToTests","handleRadioChange","questionIndex","optionIndex","prevQuestionPaper","newQuestionPaper","prevSelectedOptions","newSelectedOptions","handleCalculateScore","options","scoreData","log","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","indexOf","problemStatement","type","name","id","checked","onChange","htmlFor","option1","option2","option3","option4","index","_c","$RefreshReg$"],"sources":["/Users/ashwanisoni/Documents/Courses/eval/Eval/ui/src/Tests.js"],"sourcesContent":["// Tests.js\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Tests.css\"; // Import the CSS file for styling\r\n\r\nconst Tests = ({ userId }) => {\r\n  const [tests, setTests] = useState([]); // State to hold fetched tests\r\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\r\n  const [questionPaper, setQuestionPaper] = useState([]); // State to hold fetched question paper\r\n  const [questionIDs, setQuestionIDs] = useState([]); // State to hold selected question IDs\r\n  const [selectedOptions, setSelectedOptions] = useState([]); // State to hold selected options\r\n  const [rollNo, setRollNo] = useState(\"\"); // State to hold roll number\r\n  const [testID, setTestID] = useState(\"\"); // State to hold current selected test ID\r\n\r\n  // Function to fetch data from the backend when the component mounts\r\n  const fetchTests = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\r\n      const data = await response.json();\r\n      setTests(data); // Set the fetched tests in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to fetch question paper for the selected test\r\n  const fetchQuestionPaper = async (testID) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ testID }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch question paper\");\r\n      }\r\n\r\n      const questionPaperData = await response.json();\r\n      // Ensure that questionPaperData is defined before mapping over it\r\n      if (Array.isArray(questionPaperData)) {\r\n        // Add a 'selectedOption' property to each question to track the selected radio button\r\n        const updatedQuestionPaper = questionPaperData.map((question) => ({\r\n          ...question,\r\n          selectedOption: null,\r\n        }));\r\n        setQuestionPaper(updatedQuestionPaper);\r\n      } else {\r\n        console.error(\"Invalid question paper data format\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching question paper:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle selecting a test\r\n  const handleTestClick = async (test) => {\r\n    await fetchQuestionPaper(test._id);\r\n    setSelectedTest(test); // Set the selected test to display fullscreen\r\n    setTestID(test._id); // Set the current selected test ID\r\n    setQuestionIDs(test.questionId); // Set the question IDs for the selected test\r\n    setRollNo(userId); // Set the roll number using the received userId\r\n  };\r\n\r\n  // Function to handle going back to showing all tests\r\n  const handleBackToTests = () => {\r\n    setSelectedTest(null); // Reset selected test to null to display all tests\r\n    setQuestionIDs([]); // Reset selected question IDs\r\n    setSelectedOptions([]); // Reset selected options\r\n    setRollNo(\"\"); // Reset roll number\r\n    setTestID(\"\"); // Reset current selected test ID\r\n  };\r\n\r\n  // Function to handle radio button change\r\n  const handleRadioChange = (questionIndex, optionIndex) => {\r\n    // Update the selectedOption property in the questionPaper state\r\n    setQuestionPaper((prevQuestionPaper) => {\r\n      const newQuestionPaper = [...prevQuestionPaper];\r\n      newQuestionPaper[questionIndex].selectedOption = optionIndex;\r\n      return newQuestionPaper;\r\n    });\r\n\r\n    // Update the selectedOptions state\r\n    setSelectedOptions((prevSelectedOptions) => {\r\n      const newSelectedOptions = [...prevSelectedOptions];\r\n      newSelectedOptions[questionIndex] = `option${optionIndex + 1}`;\r\n      return newSelectedOptions;\r\n    });\r\n  };\r\n\r\n  // Function to handle score calculation\r\n  const handleCalculateScore = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/calculateScore\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          questionIDs,\r\n          options: selectedOptions,\r\n          rollNo,\r\n          testID,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to calculate score\");\r\n      }\r\n\r\n      const scoreData = await response.json();\r\n      console.log(\"Score Data:\", scoreData);\r\n      // Add logic to handle the received score data (if needed)\r\n    } catch (error) {\r\n      console.error(\"Error calculating score:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTests(); // Fetch data when the component mounts\r\n  }, []);\r\n\r\n  // useEffect to update rollNo when userId prop changes\r\n  useEffect(() => {\r\n    setRollNo(userId);\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div className=\"tests-container\">\r\n      {selectedTest ? (\r\n        <div className=\"test-fullscreen\">\r\n          <div className=\"test-content\">\r\n            <button onClick={handleBackToTests}>⬅</button>\r\n            <h1>Test {tests.indexOf(selectedTest) + 1}</h1>\r\n            <div>\r\n              {questionPaper.map((question, questionIndex) => (\r\n                <div key={questionIndex} className=\"test-question\">\r\n                  <p>{question.problemStatement}</p>\r\n                  <div className=\"test-options\">\r\n                    <div className=\"test-option\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        name={`question-${questionIndex}`}\r\n                        id={`option-1-${questionIndex}`}\r\n                        checked={question.selectedOption === 0}\r\n                        onChange={() => handleRadioChange(questionIndex, 0)}\r\n                      />\r\n                      <label htmlFor={`option-1-${questionIndex}`}>\r\n                        {question.option1}\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"test-option\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        name={`question-${questionIndex}`}\r\n                        id={`option-2-${questionIndex}`}\r\n                        checked={question.selectedOption === 1}\r\n                        onChange={() => handleRadioChange(questionIndex, 1)}\r\n                      />\r\n                      <label htmlFor={`option-2-${questionIndex}`}>\r\n                        {question.option2}\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"test-option\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        name={`question-${questionIndex}`}\r\n                        id={`option-3-${questionIndex}`}\r\n                        checked={question.selectedOption === 2}\r\n                        onChange={() => handleRadioChange(questionIndex, 2)}\r\n                      />\r\n                      <label htmlFor={`option-3-${questionIndex}`}>\r\n                        {question.option3}\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"test-option\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        name={`question-${questionIndex}`}\r\n                        id={`option-4-${questionIndex}`}\r\n                        checked={question.selectedOption === 3}\r\n                        onChange={() => handleRadioChange(questionIndex, 3)}\r\n                      />\r\n                      <label htmlFor={`option-4-${questionIndex}`}>\r\n                        {question.option4}\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <button onClick={handleCalculateScore}>Calculate Score</button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1>Tests</h1>\r\n          <div className=\"tests-wrapper\">\r\n            {tests.map((test, index) => (\r\n              <div\r\n                key={test._id}\r\n                onClick={() => handleTestClick(test)}\r\n                className=\"test-box\"\r\n              >\r\n                <h3>Test {index + 1}</h3>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tests;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}