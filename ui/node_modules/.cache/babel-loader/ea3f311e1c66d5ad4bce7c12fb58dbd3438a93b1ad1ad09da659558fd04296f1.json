{"ast":null,"code":"var _jsxFileName = \"/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Tests.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tests = () => {\n  _s();\n  const [tests, setTests] = useState([]); // State to hold fetched tests\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\n  const [questionPaper, setQuestionPaper] = useState([]); // State to hold fetched question paper\n\n  // Function to fetch data from the backend when the component mounts\n  const fetchTests = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\n      const data = await response.json();\n      setTests(data); // Set the fetched tests in state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Function to fetch question paper for the selected test\n  const fetchQuestionPaper = async testID => {\n    try {\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          testId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch question paper\");\n      }\n      const questionPaperData = await response.json();\n      setQuestionPaper(questionPaperData);\n    } catch (error) {\n      console.error(\"Error fetching question paper:\", error);\n    }\n  };\n\n  // Function to handle selecting a test\n  const handleTestClick = async test => {\n    await fetchQuestionPaper(test._id);\n    setSelectedTest(test); // Set the selected test to display fullscreen\n  };\n\n  // Function to handle going back to showing all tests\n  const handleBackToTests = () => {\n    setSelectedTest(null); // Reset selected test to null to display all tests\n  };\n\n  // Function to handle checkbox change\n  const handleCheckboxChange = index => {\n    // Update the checkbox status in the question paper state\n    setQuestionPaper(prevQuestionPaper => {\n      const newQuestionPaper = [...prevQuestionPaper];\n      newQuestionPaper[index].checked = !newQuestionPaper[index].checked;\n      return newQuestionPaper;\n    });\n  };\n  useEffect(() => {\n    fetchTests(); // Fetch data when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests-container\",\n    children: selectedTest ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-fullscreen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToTests,\n          children: \"\\u2B05\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Test \", tests.indexOf(selectedTest) + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: questionPaper.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"test-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: question.checked || false,\n              onChange: () => handleCheckboxChange(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.problemStatement\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tests-wrapper\",\n        children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleTestClick(test),\n          className: \"test-box\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Test \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)\n        }, test._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Tests, \"HD7l+OweQf3KMpDNZCdxKShI0Wk=\");\n_c = Tests;\nexport default Tests;\nvar _c;\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Tests","_s","tests","setTests","selectedTest","setSelectedTest","questionPaper","setQuestionPaper","fetchTests","response","fetch","data","json","error","console","fetchQuestionPaper","testID","method","headers","body","JSON","stringify","testId","ok","Error","questionPaperData","handleTestClick","test","_id","handleBackToTests","handleCheckboxChange","index","prevQuestionPaper","newQuestionPaper","checked","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","indexOf","map","question","type","onChange","problemStatement","_c","$RefreshReg$"],"sources":["/Users/ashwanisoni/Downloads/Proj1/ui/src/Tests.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Tests.css\"; // Import the CSS file for styling\r\n\r\nconst Tests = () => {\r\n  const [tests, setTests] = useState([]); // State to hold fetched tests\r\n  const [selectedTest, setSelectedTest] = useState(null); // State to keep track of selected test\r\n  const [questionPaper, setQuestionPaper] = useState([]); // State to hold fetched question paper\r\n\r\n  // Function to fetch data from the backend when the component mounts\r\n  const fetchTests = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadTests\"); // Fetch data from your backend API\r\n      const data = await response.json();\r\n      setTests(data); // Set the fetched tests in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to fetch question paper for the selected test\r\n  const fetchQuestionPaper = async (testID) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/loadQuestionPaper\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ testId }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch question paper\");\r\n      }\r\n\r\n      const questionPaperData = await response.json();\r\n      setQuestionPaper(questionPaperData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching question paper:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle selecting a test\r\n  const handleTestClick = async (test) => {\r\n    await fetchQuestionPaper(test._id);\r\n    setSelectedTest(test); // Set the selected test to display fullscreen\r\n  };\r\n\r\n  // Function to handle going back to showing all tests\r\n  const handleBackToTests = () => {\r\n    setSelectedTest(null); // Reset selected test to null to display all tests\r\n  };\r\n\r\n  // Function to handle checkbox change\r\n  const handleCheckboxChange = (index) => {\r\n    // Update the checkbox status in the question paper state\r\n    setQuestionPaper((prevQuestionPaper) => {\r\n      const newQuestionPaper = [...prevQuestionPaper];\r\n      newQuestionPaper[index].checked = !newQuestionPaper[index].checked;\r\n      return newQuestionPaper;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTests(); // Fetch data when the component mounts\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tests-container\">\r\n      {selectedTest ? (\r\n        <div className=\"test-fullscreen\">\r\n          <div className=\"test-content\">\r\n            <button onClick={handleBackToTests}>â¬…</button>\r\n            <h1>Test {tests.indexOf(selectedTest) + 1}</h1>\r\n            <div>\r\n              {questionPaper.map((question, index) => (\r\n                <div key={index} className=\"test-question\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={question.checked || false}\r\n                    onChange={() => handleCheckboxChange(index)}\r\n                  />\r\n                  <p>{question.problemStatement}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1>Tests</h1>\r\n          <div className=\"tests-wrapper\">\r\n            {tests.map((test, index) => (\r\n              <div\r\n                key={test._id}\r\n                onClick={() => handleTestClick(test)}\r\n                className=\"test-box\"\r\n              >\r\n                <h3>Test {index + 1}</h3>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tests;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}